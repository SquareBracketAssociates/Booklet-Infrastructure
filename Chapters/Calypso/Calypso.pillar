!! IT IS OUTDATED DOC. Do not use it.

!!Architecture of the new system browser


Calypso is a new system browser and tool suite. It is the basis for TelePharo, the remote Pharo IDE.
It uses the Commander framework to reify commands.

Calypso supports the following features:
- new navigation model
- tabbed toolbar instead of a single source code panel
-- separate tools in their own tabs to create/edit methods/classes
- explicit commands instead of duplicated menus and shortcuts
- extendible by plugins
- suitable for remote scenarios
- among the new features:
-- method groups instead of protocols
---"dynamic protocols"
---based on method tags as symbols
---supporting multiple tags per method
---odes not require the star convention (hack) for class extension
--package view is based on class groups
---"dynamic protocols" for classes
---based on class tags as symbols
---supports multiple tags per class
--visibility option for inherited methods
--methods inherited from traits are not shown by default
--variable view as a special mode for the method group view

Calypso will be part of the new Pharo 70. In this chapter we present the architecture and the key abstractions
supporting the extensible structure of Calypso.

Calypso manipulates navigation environments which can be scoped and queried. Queries return cursor objects which represent a stream of objects.


!!! Calypso navigation model


!!!! System and navigation environments
In Calypso, users query environments to get a specific set of objects such as classes, methodsâ€¦

First you need to get a ""navigation"" environment instance. There is a default one for the current image:
[[[
| env |
env := ClySystemNavigationEnvironment currentImage
]]]

It is a navigation environment which is created over some ""system environment"". In this case, it is the current image:

[[[
ClySystemEnvironment currentImage
]]]

A system environment models the image. It includes a package manager, a namespace (globals) and a system announcer.

A navigation environment provides an interface to query information from it. It organizes caches for all queries. When you browse senders of the message ==do:==, the same result will be returned the second time you browse the same senders. Caches optimize performance and memory usage during navigation.

You can use your own navigation instance instead of the global one. The one above is equivalent to the following expression:
[[[
| env |
env := ClySystemNavigationEnvironment over: ClySystemEnvironment currentImage
]]]

External libraries can provide their own system environment and Calypso will still be able to browse it. For example, a new version of Ring allows one to browse on-disk code repositories with all Calypso features.

!!!! Scoping environments

Next, you will need a scope to filter your environment object.

You can define a scope on the environment for the full system:
[[[
	| env systemScope |
	env := ClySystemNavigationEnvironment currentImage.
	systemScope := env systemScope
]]]

Or you can create a scope based on some concrete objects (such as classes, packages):
[[[
	| env packageScope classScope |
	env := ClySystemNavigationEnvironment currentImage.
	packageScope := env selectScope: ClyPackageScope of: {Point package}.
	classScope := env selectScope: ClyClassScope of: {Point. Collection}.
]]]



[[[
	| env classScope |
	env := ClySystemNavigationEnvironment currentImage.
	classScope := env selectScope: ClyClassScope of: {Point. Collection}
	classScope allClasses
]]]

@@todo why is this not working?

!!! Queries and their results: Cursors
Once you have a scope, you can execute queries:

[[[
| env packageScope classScope |
env := ClySystemNavigationEnvironment currentImage.
packageScope := env selectScope: ClyPackageScope of: {Point package}.
classScope := env selectScope: ClyClassScope of: {Point. Collection}.

packageScope query: ClySortedClasses
"returns all the classes in the package sorted"

classScope query: ClySortedMethods
"returns all the methods of the class sorted"

packageScope query: (ClyMessageSenders of: #(do: x))
"returns all the senders of both messages (do: and x)"

classScope query: (ClyMessageImplementors of: #(select: y:))
"returns all the classes implementing any of select: or y:"
]]]



With LocalClassScope, you will see only things which are defined in a class itself.
There are also ClassHierarchyScope subclasses. They show you all the things which are visible from related classes depending on what type of hierarchy they represent (there are ClySubclassScope, ClyInheritedTraitScope, etc).



Any query returns an instance of cursor, which provides stream access to the result as we will see below.
STEF HERE


Result is represented by the requested ==ClyEnvironmentContent== subclass.

STEF: is a cursor an instance of ClyEnvironmentContent? No apparently so what is the relationships?


In the first example, an instance of ==ClySortedClasses== is sent as the argument. The query method accepts a query instance (subclasses of ClyEnvironmentQuery) or compatible object which responds to the ==asEnvironmentQuery== message.

The class of the result itself plays the role of the most trivial query: ==ClyEnvironmentSimpleQuery==.
SEAN: The sentence above is impossible for me to understand.

Simple query is responsible to return all objects accessible from a given scope in the requested form.  For example, you can query all classes in a hierarchical form:

[[[
packageScope query: ClyHierarchicallySortedClasses
]]]

Any query is either created with its requested content or defines a default one.  For example, senders and implementors use sorted methods by default. But they can use others:

[[[
classScope query: (ClyMessageSenders of: #(do:) as: ClyHierarchicallySortedMethods)
]]]

!!! Cursor objects
As was mentioned above, the actual result of ==query:== is a cursor object, an instance of ==ClyEnvironmentCursor==:

[[[
cursor := classScope query: ClySortedMethods
]]]

Cursor provides stream access to the requested content items:
[[[
cursor currentItem.
cursor nextItem.
cursor moveTo: itemPosition.
cursor retrieveAll
]]]

Returned items are not raw objects like methods or classes. Instead they are instances of ClyEnvironmentItem which wraps the actual objects. Items extend objects with an arbitrary set of properties. For example, if a class has an abstract method it can be marked with "abstract property". If a method is overridden in subclasses it can be marked by "overridden property". Then tools use these properties to provide customized representations for these items. For example, the browser can show abstract classes with an italic font and it can show a special icon for overridden method(s).


!!! Caching computation

Computation of properties is slow. Imaging that you look at all the classes in the system and for each class you want an abstract property. It will require scanning almost all methods in the system.

Calypso solves this problem in two ways:

- All queries are cached. Computation will be performed only once.

- Properties are computed lazily when objects are really used.  For example, they are computed for only the subset of objects which is actually visible.

Lazy computation is hidden from users by the cursor instance. Cursor asks the observed environment content to resolve a small part of items according to the current position. Then the cursor uses the resolved part as an items cache. And new portions of the items are resolved on demand.

This logic provides an important optimization for the remote scenario where the observed content is a remote object. In this case, only the used subset of items is transferred over the network. And when the next subset is actually needed, it is loaded to the client. This makes the remote browser very fast because only the visible subset of packages, classes and methods are sent over the network and all required information is available in a few requests.


Now let's play with an example cursor. It can be opened in a table morph:
[[[
cursor := packageScope query: ClySortedClasses.
dataSource := ClyCollapsedDataSource on: cursor.
table := FTTableMorph new.
table
    extent: 200 @ 400;
    dataSource: dataSource;
    openInWindow
]]]

imageHere

Cursor provides a query API to evaluate new queries with modified parameters.

For example you can ask a different kind of result than the original query:

[[[
cursor := cursor query: ClyHierarchicallySortedClasses
]]]

imageHere

Or you can evaluate a new query with an extra package:

[[[
cursor := cursor queryContentInScopeWith: #'AST-Core' asPackage
]]]

imageHere

Or you can evaluate a new query without an existing package:
[[[
cursor := cursor queryContentInScopeWithout: #Kernel asPackage
]]]

imageHere

With cursor you can filter to the child scope of particular items. For example you can query methods of selected classes:
[[[
cursor := cursor query: ClySortedMethods from: {Point. Array}.
]]]

imageHere

You can also evaluate the original query in a different scope. It allows you to fetch class side methods of selected classes:
[[[
cursor := cursor queryContentInNewScope: ClyClassSideScope
]]]

imageHere

All these queries never modify the cursor state. They always return a new cursor instance which points to the new result.


!!! Tree structure

On top of this navigation model, Calypso implements a tree structure. For example, you can look at classes and methods in the same table morph:

[[[
cursor := packageScope query: ClySortedClasses.
dataSource := ClyCollapsedDataSource on: cursor.
dataSource childrenStructure: { ClySortedMethods }.
table := FTTableMorph new.
table
    extent: 200 @ 400;
    dataSource: dataSource;
    openInWindow
]]]

imageHere


Tree structure can include many levels. For example, packages -> class groups -> classes:
[[[
cursor := env systemScope query: ClySortedPackages.
dataSource := ClyCollapsedDataSource on: cursor.
dataSource childrenStructure: { ClySortedClassGroups. ClyHierarchicallySortedClasses}.
table := FTTableMorph new.
table
    extent: 200 @ 400;
    dataSource: dataSource;
    openInWindow
]]]

imageHere


Also it is possible to show hierarchical items with collapsing buttons:
[[[
cursor := packageScope query: ClyHierarchicallySortedClasses.
dataSource := ClyExpandedDataSource on: cursor.
table := FTTableMorph new.
table
    extent: 200 @ 400;
    dataSource: dataSource;
    openInWindow
]]]

imageHere


Finally, let's implement a new environment content ==RandomOrderedMethods==:
[[[
ClyMethodsContent subclass: #ClyRandomOrderedMethods
    instanceVariableNames: ''
    classVariableNames: ''
    package: 'Calypso-Example'
]]]

Each kind of environment content implements a set of the building methods depending on what scope it supports. For example, ClySortedMethods supports extracting methods from classes and method groups. ClySortedClasses supports extracting classes from packages and class groups.

When simple query is evaluated by a given scope, it asks for the requested content to be built from concrete objects. For package scope, it will ask the content to #buildFromPackages:. For class scope, it will ask the content to #buildFromClasses:.

For simplicity, ClyRandomOrderedMethods will only support class scope:
[[[
buildFromClasses: classes
    items := OrderedCollection new.
    classes do: [ :eachClass |
        eachClass localMethods do: [ :each |
            items add: (ClyEnvironmentItem named: each selector with: each)] ].
    items shuffle
]]]

Now look at the methods in a new form:
[[[
cursor := env systemScope query: ClySortedPackages.
dataSource := ClyCollapsedDataSource on: cursor.
dataSource childrenStructure: { ClySortedClasses. RandomOrderedMethods}.
table := FTTableMorph new.
table
    extent: 200 @ 400;
    dataSource: dataSource;
    openInWindow
]]]

imageHere


"Building" methods are required to be able to evaluate simple queries in a new implemented form. More advanced queries might require different code. Generally queries implement one method:
-fetchContent: anEnvironmentContent from: anEnvironmentScope
where they dispatch processing to the scope and environment content depending on their logic. For example, to be able to use a new random order for senders or implementors, the method #buildFromMethods: should be implemented by the content:
[[[
buildFromMethods: methods
    items := methods shuffled collect: [ :each |
  ClyEnvironmentItem named: each selector with: each]
]]]

If you open a senders browser:
[[[
browser := ClyMethodBrowser browseSendersOf: #do:
]]]

imageHere

you can switch it to a new order:
[[[
browser switchToResultContent: ClyRandomOrderedMethods
]]]

imageHere


For more details, look at code and read the class comments.
